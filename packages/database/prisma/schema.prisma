generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MA
  FE
}

model Administrator {
  id       String @id @db.VarChar(255)
  name     String @db.Text
  email    String @unique @db.VarChar(255)
  password String @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Senior {
  id        String   @id @db.VarChar(255)
  name      String   @db.Text
  email     String?  @db.VarChar(255)
  password  String   @db.VarChar(255)
  address   String   @db.Text
  birthDate DateTime @db.Date
  validated Boolean  @default(false)
  gender    Gender?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]
}

model Service {
  id                  Int      @id @default(autoincrement())
  name                String   @unique @db.VarChar(255)
  title               String   @db.Text
  description         String   @db.Text
  color               String   @db.Text
  minutesPerAttention Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  events        Event[]
  professionals Professional[]
}

model Center {
  id      Int    @id @default(autoincrement())
  name    String @unique @db.VarChar(255)
  address String @db.Text
  phone   String @db.VarChar(255)
  color   String @db.Text

  // Services Daily Attentions represents the daily 
  // attentions for each service in the current center

  // For example, Center A has 3 services: Service A, Service B, Service C

  // Service 1 has 10 daily attentions
  // Service 2 has 5 daily attentions
  // Service 3 has 15 daily attentions

  // The servicesDailyAttentions field will be like this:

  // servicesDailyAttentions: [
  //   { serviceId: 1, dailyAttentions: 10 },
  //   { serviceId: 2, dailyAttentions: 5 },
  //   { serviceId: 3, dailyAttentions: 15 }
  // ]

  // The daily attention is the number of attentios for each professional in the center

  servicesDailyAttentions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Event     Event[]
}

model Professional {
  id       String @id @db.VarChar(255)
  name     String @db.Text
  email    String @db.VarChar(255)
  password String @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events    Event[]
  serviceId Int?

  service Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)
}

model Event {
  id         Int      @id @default(autoincrement())
  start      DateTime @db.DateTime
  end        DateTime @db.DateTime
  assistance Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  seniorId       String?
  professionalId String?
  centerId       Int?
  serviceId      Int?

  senior       Senior?       @relation(fields: [seniorId], references: [id], onDelete: SetNull)
  professional Professional? @relation(fields: [professionalId], references: [id], onDelete: SetNull)
  service      Service?      @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  center       Center?       @relation(fields: [centerId], references: [id], onDelete: SetNull)
}
